#!/bin/bash

# Classic factorial
factorial() {
    local n=$1
    
    # Base case
    if [[ $n -le 1 ]]; then
        echo 1
        return
    fi
    
    # Recursive case
    local prev=$(factorial $((n - 1)))
    echo $((n * prev))
}

# Fibonacci sequence
fibonacci() {
    local n=$1
    
    if [[ $n -le 0 ]]; then
        echo 0
    elif [[ $n -eq 1 ]]; then
        echo 1
    else
        local a=$(fibonacci $((n - 1)))
        local b=$(fibonacci $((n - 2)))
        echo $((a + b))
    fi
}

# Directory tree traversal
print_tree() {
    local dir=${1:-.}
    local prefix=${2:-""}
    local depth=${3:-0}
    
    # Prevent infinite recursion
    if [[ $depth -gt 10 ]]; then
        echo "${prefix}... (max depth reached)"
        return
    fi
    
    for item in "$dir"/*; do
        if [[ -e $item ]]; then
            local basename=$(basename "$item")
            echo "$prefix├── $basename"
            
            if [[ -d $item && ! -L $item ]]; then
                print_tree "$item" "$prefix│   " $((depth + 1))
            fi
        fi
    done
}

# Binary search in sorted array
binary_search() {
    local -a arr=("${!1}")  # Array passed by reference
    local target=$2
    local left=${3:-0}
    local right=${4:-$((${#arr[@]} - 1))}
    
    if [[ $left -gt $right ]]; then
        echo -1  # Not found
        return
    fi
    
    local mid=$(((left + right) / 2))
    
    if [[ ${arr[mid]} -eq $target ]]; then
        echo $mid  # Found at index mid
    elif [[ ${arr[mid]} -gt $target ]]; then
        binary_search arr[@] $target $left $((mid - 1))
    else
        binary_search arr[@] $target $((mid + 1)) $right
    fi
}

# Greatest Common Divisor (Euclidean algorithm)
gcd() {
    local a=$1
    local b=$2
    
    if [[ $b -eq 0 ]]; then
        echo $a
    else
        gcd $b $((a % b))
    fi
}

# Usage examples
echo "Factorial of 5: $(factorial 5)"
echo "10th Fibonacci number: $(fibonacci 10)"

echo -e "\nDirectory tree:"
print_tree "." "" 0

sorted_array=(1 3 5 7 9 11 13 15 17 19)
index=$(binary_search sorted_array[@] 7)
echo "Index of 7 in array: $index"

echo "GCD of 48 and 18: $(gcd 48 18)"