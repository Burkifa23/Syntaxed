#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <getopt.h>  // For advanced argument parsing

// Function prototypes
void print_usage(const char* program_name);
void demonstrate_basic_args(int argc, char *argv[]);
void demonstrate_argument_parsing(int argc, char *argv[]);
void demonstrate_environment_vars(char *envp[]);
int process_file_operation(const char* operation, const char* filename);
void show_program_info(void);

// Main function with environment variables
int main(int argc, char *argv[], char *envp[]) {
    printf("=== COMMAND LINE ARGUMENTS DEMONSTRATION ===\n\n");
    
    // Show basic program information
    show_program_info();
    
    // Demonstrate basic argument handling
    demonstrate_basic_args(argc, argv);
    
    // Advanced argument parsing
    demonstrate_argument_parsing(argc, argv);
    
    // Environment variables
    demonstrate_environment_vars(envp);
    
    return 0;
}

void show_program_info(void) {
    printf("=== PROGRAM INFORMATION ===\n");
    printf("This program demonstrates command line argument processing.\n");
    printf("Compile with: gcc -o cmdargs command-line-args.c\n");
    printf("Try running with different arguments!\n\n");
    
    printf("Example usage:\n");
    printf("  ./cmdargs\n");
    printf("  ./cmdargs hello world 123\n");
    printf("  ./cmdargs --help\n");
    printf("  ./cmdargs --verbose --file=input.txt --count=10\n");
    printf("  ./cmdargs -v -f input.txt -c 10\n\n");
}

void demonstrate_basic_args(int argc, char *argv[]) {
    printf("=== BASIC ARGUMENT PROCESSING ===\n");
    
    printf("argc (argument count): %d\n", argc);
    printf("Arguments:\n");
    
    for (int i = 0; i < argc; i++) {
        printf("  argv[%d]: \"%s\"\n", i, argv[i]);
    }
    
    // Program name is always argv[0]
    printf("\nProgram name: %s\n", argv[0]);
    
    if (argc > 1) {
        printf("Command line arguments provided:\n");
        for (int i = 1; i < argc; i++) {
            printf("  Arg %d: %s\n", i, argv[i]);
        }
    } else {
        printf("No command line arguments provided.\n");
    }
    
    // SIMPLE ARGUMENT PROCESSING
    printf("\n=== SIMPLE ARGUMENT ANALYSIS ===\n");
    
    int number_count = 0;
    int string_count = 0;
    
    for (int i = 1; i < argc; i++) {
        char *endptr;
        long value = strtol(argv[i], &endptr, 10);
        
        if (*endptr == '\0') {
            printf("Argument %d is a number: %ld\n", i, value);
            number_count++;
        } else {
            printf("Argument %d is a string: \"%s\" (length: %zu)\n", 
                   i, argv[i], strlen(argv[i]));
            string_count++;
        }
    }
    
    printf("Summary: %d numbers, %d strings\n", number_count, string_count);
    printf("\n");
}

void demonstrate_argument_parsing(int argc, char *argv[]) {
    printf("=== ADVANCED ARGUMENT PARSING ===\n");
    
    // FLAGS AND OPTIONS
    int verbose_flag = 0;
    int help_flag = 0;
    int count = -1;
    char *filename = NULL;
    char *output_file = NULL;
    
    // MANUAL PARSING (simple approach)
    printf("Manual parsing results:\n");
    
    for (int i = 1; i < argc; i++) {
        if (strcmp(argv[i], "--help") == 0 || strcmp(argv[i], "-h") == 0) {
            help_flag = 1;
        }
        else if (strcmp(argv[i], "--verbose") == 0 || strcmp(argv[i], "-v") == 0) {
            verbose_flag = 1;
        }
        else if (strncmp(argv[i], "--file=", 7) == 0) {
            filename = argv[i] + 7;  // Skip "--file="
        }
        else if (strncmp(argv[i], "--count=", 8) == 0) {
            count = atoi(argv[i] + 8);  // Skip "--count="
        }
        else if (strcmp(argv[i], "-f") == 0 && i + 1 < argc) {
            filename = argv[++i];  // Next argument is the filename
        }
        else if (strcmp(argv[i], "-c") == 0 && i + 1 < argc) {
            count = atoi(argv[++i]);  // Next argument is the count
        }
        else if (strcmp(argv[i], "-o") == 0 && i + 1 < argc) {
            output_file = argv[++i];  // Next argument is output file
        }
        else if (argv[i][0] == '-') {
            printf("Unknown option: %s\n", argv[i]);
        }
        else {
            printf("Positional argument: %s\n", argv[i]);
        }
    }
    
    // DISPLAY PARSED RESULTS
    printf("\nParsed options:\n");
    printf("  Help requested: %s\n", help_flag ? "Yes" : "No");
    printf("  Verbose mode: %s\n", verbose_flag ? "Yes" : "No");
    printf("  Input file: %s\n", filename ? filename : "(none)");
    printf("  Output file: %s\n", output_file ? output_file : "(none)");
    printf("  Count: %s\n", count >= 0 ? (char[32]){0} : "(none)");
    if (count >= 0) {
        sprintf((char[32]){0}, "%d", count);
        printf("  Count: %d\n", count);
    }
    
    // RESPOND TO FLAGS
    if (help_flag) {
        print_usage(argv[0]);
    }
    
    if (verbose_flag) {
        printf("\nVerbose mode activated - showing detailed information!\n");
    }
    
    // PROCESS FILE OPERATIONS
    if (filename != NULL) {
        printf("\nProcessing file: %s\n", filename);
        if (process_file_operation("read", filename) == 0) {
            printf("File operation completed successfully.\n");
        }
    }
    
    // GETOPT DEMONSTRATION (if available)
    #ifdef __GNUC__  // GNU systems typically have getopt
    printf("\n=== GETOPT DEMONSTRATION ===\n");
    
    // Reset getopt for demonstration
    optind = 1;  // Reset option index
    
    int opt;
    int demo_verbose = 0;
    char *demo_file = NULL;
    int demo_count = 0;
    
    printf("Using getopt to parse: ");
    for (int i = 0; i < argc; i++) {
        printf("%s ", argv[i]);
    }
    printf("\n");
    
    while ((opt = getopt(argc, argv, "hvf:c:o:")) != -1) {
        switch (opt) {
            case 'h':
                printf("  Found -h (help)\n");
                break;
            case 'v':
                printf("  Found -v (verbose)\n");
                demo_verbose = 1;
                break;
            case 'f':
                printf("  Found -f with argument: %s\n", optarg);
                demo_file = optarg;
                break;
            case 'c':
                printf("  Found -c with argument: %s\n", optarg);
                demo_count = atoi(optarg);
                break;
            case 'o':
                printf("  Found -o with argument: %s\n", optarg);
                break;
            case '?':
                printf("  Unknown option: -%c\n", optopt);
                break;
            default:
                printf("  Unexpected getopt return: %c\n", opt);
        }
    }
    
    // Process remaining non-option arguments
    if (optind < argc) {
        printf("  Non-option arguments: ");
        while (optind < argc) {
            printf("%s ", argv[optind++]);
        }
        printf("\n");
    }
    #endif
    
    printf("\n");
}

void demonstrate_environment_vars(char *envp[]) {
    printf("=== ENVIRONMENT VARIABLES ===\n");
    
    // METHOD 1: Using envp parameter
    printf("First 10 environment variables (via envp):\n");
    for (int i = 0; i < 10 && envp[i] != NULL; i++) {
        printf("  %s\n", envp[i]);
    }
    
    // METHOD 2: Using getenv function
    printf("\nSpecific environment variables (via getenv):\n");
    
    char *common_vars[] = {"PATH", "HOME", "USER", "SHELL", "PWD", NULL};
    
    for (int i = 0; common_vars[i] != NULL; i++) {
        char *value = getenv(common_vars[i]);
        if (value) {
            printf("  %s = %s\n", common_vars[i], value);
        } else {
            printf("  %s = (not set)\n", common_vars[i]);
        }
    }
    
    // CUSTOM ENVIRONMENT VARIABLE PARSING
    printf("\nLooking for custom application variables:\n");
    
    if (envp != NULL) {
        for (int i = 0; envp[i] != NULL; i++) {
            if (strncmp(envp[i], "MY_APP_", 7) == 0 || 
                strncmp(envp[i], "DEBUG", 5) == 0) {
                printf("  Found: %s\n", envp[i]);
            }
        }
    }
    
    printf("\n");
}

void print_usage(const char* program_name) {
    printf("\n=== USAGE INFORMATION ===\n");
    printf("Usage: %s [OPTIONS] [arguments...]\n\n", program_name);
    printf("Options:\n");
    printf("  -h, --help           Show this help message\n");
    printf("  -v, --verbose        Enable verbose output\n");
    printf("  -f, --file=FILE      Specify input file\n");
    printf("  -c, --count=NUM      Set count value\n");
    printf("  -o FILE              Specify output file\n\n");
    printf("Examples:\n");
    printf("  %s --help\n", program_name);
    printf("  %s --verbose --file=data.txt\n", program_name);
    printf("  %s -v -f input.txt -c 100 -o output.txt\n", program_name);
    printf("  %s arg1 arg2 arg3\n", program_name);
    printf("\n");
}

int process_file_operation(const char* operation, const char* filename) {
    printf("  Operation: %s\n", operation);
    printf("  Target file: %s\n", filename);
    
    // Simulate file operation
    FILE *file = fopen(filename, "r");
    if (file != NULL) {
        printf("  Status: File exists and is readable\n");
        
        // Get file size
        fseek(file, 0, SEEK_END);
        long size = ftell(file);
        fseek(file, 0, SEEK_SET);
        
        printf("  File size: %ld bytes\n", size);
        
        // Read first line if it exists
        char buffer[256];
        if (fgets(buffer, sizeof(buffer), file) != NULL) {
            // Remove newline if present
            buffer[strcspn(buffer, "\n")] = 0;
            printf("  First line: \"%.50s%s\"\n", 
                   buffer, strlen(buffer) > 50 ? "..." : "");
        }
        
        fclose(file);
        return 0;  // Success
    } else {
        printf("  Status: File not found or not accessible\n");
        printf("  Creating sample file for demonstration...\n");
        
        file = fopen(filename, "w");
        if (file != NULL) {
            fprintf(file, "This is a sample file created by the program.\n");
            fprintf(file, "It contains some demonstration text.\n");
            fprintf(file, "Line number 3\n");
            fclose(file);
            printf("  Sample file created successfully\n");
            return 0;
        } else {
            printf("  Error: Could not create file\n");
            return 1;  // Failure
        }
    }
}