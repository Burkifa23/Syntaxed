class CustomDataException implements Exception {
  final String message;
  const CustomDataException(this.message);
  
  @override
  String toString() => 'CustomDataException: $message';
}


Future<String> fetchData(bool shouldThrow) async {
  if (shouldThrow) {    
    throw CustomDataException('Connection to data source failed.');
  }
  return 'Data successfully fetched.';
}

void main() async {
  print('--- Starting Error Handling Demo ---');  
  try {
    String result = await fetchData(false);
    print('Result 1 (Success): $result');
    await fetchData(true); 
  } on CustomDataException catch (e) {    
    print('Caught Specific Custom Exception: ${e.message}');   
    try {
      int.parse('not-a-number');
    } on FormatException {
      print('Caught Built-in Exception: FormatException occurred.');
    }

  } catch (e) {    
    print('Caught General Exception: $e');
  } finally {
    print('Finally block executed. Cleanup complete.');
  }
}