void main() {
  
  print('--- LISTS - Ordered collections ---');  
  // Lists maintain insertion order and allow duplicates.
  var list = [1, 2, 3];
  var fruits = ['apple', 'banana', 'orange'];
  
  print('List: $list');
  print('First fruit: ${fruits[0]}');
  print('List length: ${fruits.length}');
  
  // Basic list mutation methods
  fruits.add('mango');
  print('After add: $fruits');
  
  fruits.remove('banana');
  print('After remove: $fruits');
  
  
  print('\n--- SETS - Unique, Unordered elements ---');  
  // Sets store unique values; adding a duplicate has no effect.
  var halogens = {'fluorine', 'chlorine', 'bromine', 'iodine', 'astatine'};
  print('Halogens: $halogens');
  
  // Explicitly creating a Set of type String (required for an empty set).
  var names = <String>{};
  names.add('Alice');
  names.add('Bob');
  names.add('Alice'); // Ignored, already exists
  print('Names (no duplicates): $names');
  
  
  var set1 = {1, 2, 3};
  var set2 = {3, 4, 5};
  print('Union: ${set1.union(set2)}');
  print('Intersection: ${set1.intersection(set2)}');
  
  
  print('\n--- MAPS - Key-value pairs ---');
  // Maps associate keys with values. Keys must be unique.
  var gifts = {    
    'first': 'partridge',
    'second': 'turtledoves',
    'fifth': 'golden rings',
  };
  print('Gifts: $gifts');
  
  var nobleGases = {
    2: 'helium',
    10: 'neon',
    18: 'argon',
  };
  print('Noble gases: $nobleGases');
  
  
  print('First gift: ${gifts['first']}');
  
  // Adding a new key-value pair
  gifts['third'] = 'french hens';
  print('After adding: $gifts');
  
  
  print('Contains "first": ${gifts.containsKey('first')}');
  
  
  print('\n--- Iterating over map ---');
  gifts.forEach((key, value) {
    print('  $key: $value');
  });
  
  
  print('\n--- Common Collection Properties ---');
  var numbers = [1, 2, 3, 4, 5];
  print('First: ${numbers.first}');
  print('Last: ${numbers.last}');
  print('Is empty: ${numbers.isEmpty}');
  print('Contains 3: ${numbers.contains(3)}');
}
