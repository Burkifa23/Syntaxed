This x86-64 assembly code demonstrates the use of a macro to simplify a common task: printing a string to standard output. A macro is a simple text substitution tool that replaces a defined block of code whenever its name is invoked. It is a feature of the assembler, not the CPU.

Macro Definition
%macro print_string 2: This line begins the macro definition.

%macro is the directive to define a macro.

print_string is the name of the macro.

2 indicates that it accepts two parameters.

mov rax, 1, mov rdi, 1, mov rsi, %1, mov rdx, %2, syscall: This is the code template for the print_string macro.

rax, rdi, rsi, and rdx are set up for the sys_write system call.

%1 and %2 are placeholders for the first and second parameters, respectively.

%endmacro: This line marks the end of the macro definition.

Code Execution (_start)
print_string msg, msg_len: This is where the macro is invoked. The assembler substitutes this line with the full block of code from the macro definition. The parameters msg and msg_len are used to replace the %1 and %2 placeholders.

At assembly time, the line becomes:

mov rax, 1
mov rdi, 1
mov rsi, msg
mov rdx, msg_len
syscall
mov rax, 60, mov rdi, 0, syscall: The program then exits gracefully.