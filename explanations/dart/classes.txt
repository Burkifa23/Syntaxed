Dart Classes 

Learn more: https://dart.dev/language/classes

This code provides a comprehensive overview of class and object-oriented programming fundamentals in Dart, which is essential for structuring data models (like those corresponding to a Firebase/Supabase tables) and application logic.

Basic Class Definition

Classes serve as blueprints for objects. They define properties (instance variables) and behavior (methods).

Instance Variables: Properties defined within a class. In the Point example, x and y are nullable (double?), defaulting to null if uninitialized, while z is initialized to 0.

class Point {
    double? x; // Nullable
    double? y; // Nullable
    double z = 0; // Non-nullable with default value
}

Constructors (Creating Objects)

Constructors are special methods used to create and initialize instances of a class.

Generative Constructor (Syntactic Sugar): Dart offers a shorthand to initialize instance variables directly in the parameter list.

// The 'this.' automatically assigns the parameter value to the instance variable.
Spacecraft(this.name, this.launchDate);

Named Constructor: Allows for multiple ways to create an object, often for specific use cases (e.g., creating an object with default or calculated values).

// Calls the default constructor with the provided name and null for launchDate.
Spacecraft.unlaunched(String name) : this(name, null);

Methods and Getters/Setters

Methods define an object's behavior. Dart also provides specific syntax for calculated properties (getters) and controlled mutation (setters).

Instance Method: A function defined within a class that operates on the instance's data (e.g., distanceTo in PointWithMethods).

Getters: Provide a calculated value for a property without storing it as a variable. They are accessed like properties, not methods.

// Getter: Calculates the 'right' edge based on 'left' and 'width'.
double get right => left + width;

Setters: Allows for controlled assignment to a property, often used to validate input or update other related properties (like setting right updates left).

// Setter: When 'rect.right = 12' is called, this logic executes.
set right(double value) => left = value - width;

Static Members

Static members belong to the class itself, not to any specific instance. They are useful for utility functions or constants.

Static Methods: Methods called directly on the class name (e.g., PointStatic.distanceBetween(a, b)). They cannot access instance variables (this.x) but can access other static members.

static double distanceBetween(PointStatic a, PointStatic b) { ... }
