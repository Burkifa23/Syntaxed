Dart Null Safety Explained

This code shows how Dart prevents null reference errors using Sound Null Safety. All types in modern Dart are non-nullable by default.

Non-Nullable vs. Nullable Types

Non-Nullable Types:
Variables like 'age' (int) and 'name' (String) cannot be null.
Trying to assign null to them results in a compile-time error, stopping the bug before your app runs.

Example:
int age = 25;
String name = 'Alice';
// age = null; // Error

Nullable Types:
Adding a question mark (?) makes a type nullable, like int? or String?.
This explicitly allows the variable to hold either a value or null. Uninitialized nullable variables default to null.

Example:
int? nullableAge; // Defaults to null
String? nullableName = null;

Null-Aware Operators (Safe Handling of Null)

Dart provides special operators to work with nullable types safely:

Safe Navigation (?.)
Safely calls a method or accesses a property only if the object isn't null.
If the object is null, the expression immediately returns null instead of crashing.

Example:
String? text = 'Hello';
print(text?.length); // Returns 5
text = null;
print(text?.length); // Returns null (no crash)

Null-Coalescing (??)
Provides a default value to use if the expression on the left is null.

Example:
String? username;
String displayName = username ?? 'Guest'; // 'Guest' is used
username = 'Bob';
displayName = username ?? 'Guest'; // 'Bob' is used

Null-Aware Assignment (??=)
Assigns a new value to a variable only if it is currently null.

Example:
String? message;
message ??= 'Hello'; // 'Hello' is assigned
message ??= 'World'; // No change, message is not null

Null Assertion (!)
This is the "I promise it's not null" operator. It tells the compiler to treat a nullable type as non-nullable.

Use with caution: If the value is actually null when this runs, your app will crash with a runtime error.

Example:
String? maybeNull = 'Value';
String definitelyNotNull = maybeNull!; // I assert it's not null
// If maybeNull was null here, it would CRASH!