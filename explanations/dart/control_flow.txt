Dart Control Flow Analysis

Learn more: https://dart.dev/language/branches

Learn more: https://dart.dev/language/loops

This code demonstrates how Dart controls the execution order of statements using branching (if/else, switch) and looping (for, while, do-while). This is essential for all application logic.

Conditional Branching (if/else)

Purpose: Executes different blocks of code based on conditions.

Structure: Supports 'if', 'else if', and 'else' clauses, checking conditions sequentially. The first true condition's block is executed, and the rest are skipped.

Example: Checking the century based on the 'year' variable.

Looping Statements (for, while, do-while)

Dart offers standard loops for repetitive tasks:

For Loop (Traditional): Used when the number of iterations is known or defined by a fixed counter. It involves an initializer, a condition, and an iterator.
Example: Counting months from 1 to 12.

For-in Loop: The preferred way to iterate over elements in a collection (like Lists or Sets). The loop runs once for every item in the collection.
Example: Iterating over the 'flybyObjects' list of planet names.

While Loop: Executes a block of code repeatedly as long as the condition remains true. The condition is checked before the loop body runs.
Example: Counting up to 5, checking the condition first.

Do-While Loop: Executes the code block at least once, and then checks the condition at the end of the loop to determine if it should continue.
Example: Guarantees the body runs once, even if the 'while' condition were immediately false.

Loop Control Keywords

These keywords allow you to modify the natural flow of a loop:

break: Immediately terminates the innermost loop and skips to the code following the loop.
Example: Exits the loop entirely when the counter 'i' reaches 5.

continue: Skips the rest of the current iteration's code block and jumps directly to the next iteration of the loop.
Example: Skips printing when 'i' is 3, but continues the loop afterward.

Switch Statements and Expressions

Used for handling multiple distinct cases or values efficiently.

Switch Statement (Traditional): Used for control flow and performing actions (side-effects like printing). Requires a 'break' to prevent fall-through between cases.
Example: Handling different String 'command' states ('OPEN', 'CLOSED').

Switch Expression (Modern Dart): A more compact syntax introduced in Dart 3.0 that returns a value. It uses the arrow '=>' for each case, does not require 'break', and must be exhaustive (cover all possibilities, often done with the '_' wildcard for 'default').
Example: Mapping a 'dayOfWeek' integer to a 'dayName' string.